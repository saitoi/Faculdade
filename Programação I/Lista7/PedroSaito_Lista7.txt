/*

Programa: Lista 7 ;
Autor: Pedro Henrique Honorio Saito ;
Data : 29/09/2022 ;
Descrição: Praticar ponteiros/ execução de códigos envonvolvendo ponteiros ;

*/

/* Questão 1 */

    Após a declaração e inicialização das variáveis inteiras "var" e o ponteiro "varPtr", é impresso o endereço de memória da variável "var", bem como o valor armazenado pelo ponteiro que corresponde ao mesmo endereço. Posteriormente, o programa exibe o inteiro (7) contido no endereço mencionado e intitulado de "var" junto do conteúdo apontado pelo ponteiro "varPtr" que se trata da mesma quantia (7). Por fim, é feita uma demonstração simples da comutatividade dos operadores "&" e "*", por meio da impressão do "&* varPtr", endereço do conteúdo apontado por esse endereço, e de "*& varPtr", conteúdo apontado pelo endereço de varPtr.

X ----------------------------------------------------------------------------------------------------------------------------- X

/* Questão 2 */

/* Programa modificado */

#include <stdio.h>
void troca ( int *a , int *b ) {
int temp ;
temp = *a;
*a = *b;
*b = temp;
} /* Fim de troca */

int main (void) {
int x , y;
scanf ("%d %d", &x , &y );
troca (&x , &y);
printf (" Troquei ----> %d %d\n", x , y) ;

return 0;
}

X ----------------------------------------------------------------------------------------------------------------------------- X

/* Questão 3 */

    A saída exibida pelo programa será a seguinte: 20 10, isto é, os valores inicialmente declarados para as variáveis inteiras "i" e "j" após serem trocados de nomenclatura. A notação "p2 = &j" atribui o endereço da variável "j" ao conteúdo de p2 que se trata de ponteiros, já "*p2 = temp" aloca o valor inteiro de "temp" para o conteúdo apontado por p2.

X ----------------------------------------------------------------------------------------------------------------------------- X

/* Questão 4 */

/* Programa consertado */

#include <stdio.h>

void Troca ( int *a , int *b ) {
int temp ;
temp = *a; *a = *b; * b = temp ;
} /* Fim de Troca */
int main (void) {
int x , y;
int * px , * py ;
/* Nao se usa isto normalmente . Isto é um exercício para aprendermos
ponteiros */
px = &x;
py = &y;
/*
* Como seria o comando scanf com px e py ao inves x e y?
* Dica : lembre - se que era scanf ("% d %d", &x , &y);
* Agora olhe os dois comandos acima e verifique quem e igual
* a &x e &y.
*/
scanf ("%d %d", px, py);
/* Como seria Troca com px e py ? */
Troca (px, py);
/* Como seria printf com px e py ? */
printf (" Troquei ----> %d %d\n", *px, *py);
return 0;
}

X ----------------------------------------------------------------------------------------------------------------------------- X

/* Questão 5 */

    O programa recebe um nome composto (primeiro nome + sobrenome) e identifica o sobrenome a partir do espaço entre as strings. Essa identificação é feita ao percorrer a string completa e encontrar um caractere de espaço para que, posteriormente, o restante do nome seja atribuído a um ponteiro, sendo retornado à função principal.

X ----------------------------------------------------------------------------------------------------------------------------- X

/* Questão 6 */

    Executei

X ----------------------------------------------------------------------------------------------------------------------------- X

/* Questão 7 */

    Executei

X ----------------------------------------------------------------------------------------------------------------------------- X

/* Questão 8 */

#include <stdio.h>
#include <stdlib.h>

int main(void) {
  // Inicia o tamanho do segmento de memória alocado com 1 byte
  size_t size = 1;

  // Repete enquanto a alocação for bem-sucedida
  while (malloc(size) != NULL) {
    // Aumenta o tamanho do segmento de memória alocado
    size *= 2;
  }

  // Imprime o tamanho do maior segmento de memória que foi possível alocar
  printf("O maior segmento de memória que foi possível alocar: %zu bytes\n", size / 2);

    /* O maior segmento alocável possível (em termos de bytes) : 35184372088832 */

  return 0;
}

X ----------------------------------------------------------------------------------------------------------------------------- X

/* Questão 9 */

*/

#include<stdio.h>
#include<stdlib.h>

int main(void){
    int i, n, *pvetor, l=0;
    float media, m, j;

    /* Define um valor para n, scanf ou n= */
    scanf("%d", &n);

    /* aloca espaco na memoria*/
    pvetor = (int *) malloc(n * sizeof(int));
    if (!pvetor){
        puts("Sem memoria.");
        return 1;
    }

    /* aqui uso pvetor, vamos ler um vetor */
    for(i = 0; i < n; i++){
        scanf("%d", pvetor + i);
    }

    /* faco alguma coisa*/

    media = 0.0;
    for(i=0; i<n; i++){
        media += *(pvetor + i);
    }
    j = n;
    m = media / j;
    for(i=0; i<n;i++){
       if (pvetor[i] > m){
        l++;
        } 
    }
    
    printf("%f\n",m);
    printf("%d numeros foram maior que a media", l);

    /* aqui nao precido mais de pvetor */
    free(pvetor);

    return 0;
}

X ----------------------------------------------------------------------------------------------------------------------------- X

/* Questão 10 */

#include<stdio.h>
#include<stdlib.h>

void ordena(int vetor[], int tamanho){
    for(int i = 0; i<tamanho; i++){
        for(int j=i; j<tamanho;j++){
            if(vetor[i] > vetor[j]){
                int temp = vetor[i];
                vetor[i] = vetor[j];
                vetor[j] = temp;
            }
        }
    }
}

void mostrarVetor(int vetor[], int tamanho){
    for(int i = 0; i<tamanho; i++){
        printf("\n%d\n", vetor[i]);
    }
}

int main(void){
    int i, n, *pvetor;
    float media;

    /* Define um valor para n, scanf ou n= */
    scanf("%d", &n);

    /* aloca espaco na memoria*/
    pvetor = (int *) malloc(n * sizeof(int));
    if (!pvetor){
        puts("Sem memoria.");
        return 1;
    }

    /* aqui uso pvetor, vamos ler um vetor */
    for(i = 0; i < n; i++){
        scanf("%d", pvetor + i);
    }

    /* faco alguma coisa*/

    media = 0.0;
    for(i=0; i<n; i++){
        media += *(pvetor + i);
    }

    printf("Vetor normal:")
    mostrarVetor(pvetor, n);

    ordena(pvetor, n);

    printf("Vetor em ordem crescente:")
    mostrarVetor(pvetor, n);

    printf("Media:")
    printf("\n%f\n",media);

    /* aqui nao precido mais de pvetor */
    free(pvetor);

    return 0;
}

X ----------------------------------------------------------------------------------------------------------------------------- X

/* Questão 11 */

#include<stdio.h>

void misterio(char *n);
int main(void){

    char nome[41];
    gets(nome);

    misterio(nome);

    return 0;
}

void misterio(char *n){
    while(*n != ' ') n++;
    n++;
    puts(n);
}

    /*O programa 8 realiza a mesma função que o programa 5, porém implementa ponteiros para char no lugar , percorrendo o conteúdo das strings até encontrar o caractere de espaço e, assim, imprimir o restante por intermédio do comando "puts ()".*/

X ----------------------------------------------------------------------------------------------------------------------------- X

/* Questão 12 */

#include <stdio.h>

void Converter(int numeroBase10, int numeroBase2[32]);

int main(int argc, char * argv[]){

    int nb10, nb2[32], i, teste = 1;

    while(1){
        scanf("%d", &nb10);
        if(nb10<0)break;


        Converter(nb10, nb2);

        printf("teste %d\n", teste++);
        printf("%d\n", nb10);

        for(i=0; i<32; i++){
            printf("%d", nb2[i]);
            
        }


        printf("\n\n");
    }
    return 0;
}

void Converter (int numeroBase10, int numeroBase2[32]){
    int i, dividendo, resto;
    for(i=0; i<32;i++){
        numeroBase2[i] = 0;
    }
    dividendo = numeroBase10;
    while(i>=0 && dividendo>=1){
        --i;
        resto = dividendo % 2;
        dividendo = dividendo / 2;
        numeroBase2[i] = resto;
    }

       
}