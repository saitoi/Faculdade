/*

Programa: media.c ;
Autor: Pedro Henrique Honorio Saito ;
Data : 25/05/2023 ;
Descrição: Trabalhando com arquivos ;

*/

/* Exercício 1 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_CONTATO 1000

typedef struct Contato {
    char nome[50],
         telefone[15],
         aniversario[5];
} Contato;

void clean_buf(void) {
    int clear;
    while ((clear = getchar()) != '\n' && clear != EOF);
}

void menu(void);
void imprimir_contato_l(Contato lista_contato[MAX_CONTATO], int quant_contato);
void inserir_contato(Contato *lista_contato, int *quant_contato);
void remover_contato(Contato *lista_contato, int *quant_contato);
void imprimir_contato(Contato lista_contato[MAX_CONTATO]);
void pesquisa_contato(Contato lista_contato[MAX_CONTATO], int quant_contato);
void registra_contato(Contato lista_contato[MAX_CONTATO], int quant_contato);
void aniversariantes_do_mes(Contato lista_contato[MAX_CONTATO], int quant_contato);

/* --- MENU --- */

void menu(void) {
    puts("--- AGENDA DE CONTATOS ---\n");
    puts("Selecione uma das possíveis ações, escolhendo o número: ");
    puts("1. Inserir contato novo.");
    puts("2. Remover contato.");
    puts("3. Pesquisar contato pelo nome.");
    puts("4. Listar todos os contatos.");
    puts("5. Listar contatos cujo nome inicia com uma dada letra.");
    puts("6. Imprimir os aniversariantes do mês.");
    printf("\nSeleção: ");
}

/* --- ADICIONAR CONTATO --- */

void inserir_contato(Contato *lista_contato, int *quant_contato) {
    (*quant_contato)++;
    printf("Insira os dados do contato %d:\n", *quant_contato);
    printf("Nome: ");
    fgets(lista_contato[*quant_contato].nome, sizeof(lista_contato[*quant_contato].nome), stdin);
    printf("Telefone: ");
    fgets(lista_contato[*quant_contato].telefone, sizeof(lista_contato[*quant_contato].telefone), stdin);
    printf("Aniversário (DD/MM): ");
    scanf("%s", lista_contato[*quant_contato].aniversario);
    clean_buf(); // Limpa o buffer de entrada após ler a string

    registra_contato(lista_contato, *quant_contato);
}

/* --- REMOVER CONTATO --- */

void remover_contato(Contato *lista_contato, int *quant_contato) {
    int alert = -1;
    char nome[50];
    printf("Insira o nome do contato que deseja remover: ");
    fgets(nome, sizeof(nome), stdin);

    for (int i = 1; i <= *quant_contato; ++i) {
        if (strcmp(nome, lista_contato[i].nome) == 0) {
            alert = i;
            break;
        }
    }

    if (alert == -1) {
        printf("Contato não encontrado.\n");
        return;
    }

    for (int i = alert; i < *quant_contato; ++i) {
        strcpy(lista_contato[i].nome, lista_contato[i + 1].nome);
        strcpy(lista_contato[i].telefone, lista_contato[i + 1].telefone);
        strcpy(lista_contato[i].aniversario, lista_contato[i + 1].aniversario);
    }

    (*quant_contato)--;
    printf("Contato removido com sucesso.\n");
}

/* --- REGISTRA CONTATO --- */

void registra_contato(Contato lista_contato[MAX_CONTATO], int quant_contato) {
    FILE *arquivo;
    arquivo = fopen("contato.txt", "a+"); // Abrindo o arquivo 'contato.txt' para escrita

    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return;
    }

    fprintf(arquivo, "CONTATO %d:\n", quant_contato);
    fprintf(arquivo, "Nome: %s", lista_contato[quant_contato].nome);
    fprintf(arquivo, "Telefone: %s", lista_contato[quant_contato].telefone);
    fprintf(arquivo, "Aniversário: %s", lista_contato[quant_contato].aniversario);
    fprintf(arquivo, "-------------------------------------\n");

    fclose(arquivo);
}

/* --- IMPRIMIR CONTATO COM LETRA --- */

void imprimir_contato_l(Contato lista_contato[MAX_CONTATO], int quant_contato) {
    int i = 0;
    char caractere;

    puts("Escolha um caractere que inicie o nome dos contatos:");
    caractere = getchar();
    clean_buf(); // Limpa o buffer de entrada após ler o caractere
    
    /* Percorrendo lista até identificar caractere */
    while (i <= quant_contato) {
        if (lista_contato[i].nome[0] == caractere || lista_contato[i].nome[0] == (caractere + 32))
            printf("Nome: %s", lista_contato[i].nome);
        ++i;
    }
}

/* --- IMPRIMIR LISTA --- */

void imprimir_contato(Contato lista_contato[MAX_CONTATO]) {
    char caractere;
    FILE *arquivo = fopen("contato.txt", "r");

    if (arquivo == NULL) {
        puts("Erro ao abrir o arquivo.");
        return;
    }
    
    while ((caractere = fgetc(arquivo)) != EOF) {
        putchar(caractere);
    }

    fclose(arquivo);
}

/* --- PESQUISA CONTATO --- */

void pesquisa_contato(Contato lista_contato[MAX_CONTATO], int quant_contato) {
    int cont;
    char contato_nome[50];

    printf("Qual contato deseja procurar: ");
    fgets(contato_nome, sizeof(contato_nome), stdin);
    for (cont = 0; cont <= quant_contato && strcmp(contato_nome, lista_contato[cont].nome) != 0; ++cont);
    if (cont > quant_contato) {
        puts("Contato não foi identificado.");
        return;
    } else {
        puts("Os dados do contato estão listados abaixo.");
        printf("Nome: %s", lista_contato[cont].nome);
        printf("Telefone: %s", lista_contato[cont].telefone);
        printf("Aniversario: %s\n", lista_contato[cont].aniversario);
    }

}

/* --- ANIVERSARIANTE DO MES --- */

void aniversariantes_do_mes(Contato lista_contato[MAX_CONTATO], int quant_contato) {
    int mes_atual;
    printf("Digite o número do mês atual: ");
    scanf("%d", &mes_atual);
    clean_buf(); // Limpa o buffer de entrada

    printf("Aniversariantes do mês %d:\n", mes_atual);

    int i, aniversariantes = 0;
    for (i = 1; i <= quant_contato; i++) {
        int mes_aniversario;
        sscanf(lista_contato[i].aniversario, "%*d/%d", &mes_aniversario);
        if (mes_aniversario == mes_atual) {
            printf("Nome: %s", lista_contato[i].nome);
            printf("Telefone: %s", lista_contato[i].telefone);
            printf("Aniversario: %s\n", lista_contato[i].aniversario);
            aniversariantes++;
        }
    }

    if (aniversariantes == 0) {
        printf("Não há aniversariantes este mês.\n");
    }
}


/* --- FUNÇÃO PRINCIPAL --- */

int main(void) {
    FILE *arquivo;
    Contato lista_contato[MAX_CONTATO];
    int quant_contato = 0;
    char resposta;

    arquivo = fopen("contato.txt", "r");

    if (arquivo == NULL) {
        puts("Erro ao abrir o arquivo.");
        return 1;
    }

    // Lê as linhas do arquivo e extrai as informações dos contatos
    while (fgets(lista_contato[quant_contato].nome, sizeof(lista_contato[quant_contato].nome), arquivo) != NULL) {
        fgets(lista_contato[quant_contato].telefone, sizeof(lista_contato[quant_contato].telefone), arquivo);
        fgets(lista_contato[quant_contato].aniversario, sizeof(lista_contato[quant_contato].aniversario), arquivo);
        quant_contato++;
    }

    fclose(arquivo);

    while (1) {
        menu(); // Impressão do menu de seleção
        resposta = getchar();
        clean_buf(); // Limpa o buffer de entrada após ler a seleção

        switch (resposta) {
            case '1':
                inserir_contato(lista_contato, &quant_contato);
                break;
            case '2':
                remover_contato(lista_contato, &quant_contato);
                break;
            case '3':
                pesquisa_contato(lista_contato, quant_contato);
                break;
            case '4':
                imprimir_contato(lista_contato);
                break;
            case '5':
                imprimir_contato_l(lista_contato, quant_contato);
                break;
            case '6':
                aniversariantes_do_mes(lista_contato, quant_contato);
                break;
            default:
                exit(0);
                break;
        }
    }

    return 0;
}


X --------------------------------------------------------------------------------------------------- X

/* Exercício 2 */

#include <stdio.h>
#include <string.h>

#define MAX_COL 1000
#define MAX_LIN 1000

void clean_buf(void);
void inverte_string(char *str);

void inverte_string(char *str) {
    char temp[MAX_COL];
    int j = 0;
    for (int i = (int)(strlen(str) - 1); i >= 0; --i, ++j)
        temp[j] = str[i];
    temp[++j] = '\0';
    strcpy(str, temp);
}

int main(void) {
    int linhas = 0;
    char buffer[MAX_COL];
    char frases[MAX_LIN][MAX_COL]; // Corrigido: MAX_COL e MAX_LIN invertidos
    FILE *arquivo;

    arquivo = fopen("frases.txt", "r");
    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return 1;
    }

    while (fgets(buffer, sizeof(buffer), arquivo) != NULL && linhas < MAX_LIN) {
        inverte_string(buffer);
        strncpy(frases[linhas], buffer, MAX_COL - 1); // Usar strncpy para evitar overflow
        frases[linhas][MAX_COL - 1] = '\0'; // Garantir que a string está terminada corretamente
        puts(frases[linhas]);
        linhas++;
    }

    fclose(arquivo);

    return 0;
}

void clean_buf(void) {
    int clear;
    while ((clear = getchar()) != '\n' && clear != EOF);
}

X --------------------------------------------------------------------------------------------------- X

/* Exercício 3 */

#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int codigo_vendedor;
    char nome_vendedor[50];
    float valor_da_venda;
    int mes;
} Registro;

// Função para criar o arquivo de dados
void criarArquivo() {
    FILE *arquivo = fopen("dados.bin", "wb");
    if (arquivo == NULL) {
        printf("Erro ao criar o arquivo.\n");
        return;
    }
    fclose(arquivo);
    printf("Arquivo criado com sucesso.\n");
}

// Função para incluir um registro no arquivo
void incluirRegistro() {
    Registro novoRegistro;
    
    printf("Digite o código do vendedor: ");
    scanf("%d", &novoRegistro.codigo_vendedor);
    
    printf("Digite o nome do vendedor: ");
    scanf("%s", novoRegistro.nome_vendedor);
    
    printf("Digite o valor da venda: ");
    scanf("%f", &novoRegistro.valor_da_venda);
    
    printf("Digite o mês: ");
    scanf("%d", &novoRegistro.mes);
    
    FILE *arquivo = fopen("dados.bin", "ab");
    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return;
    }
    
    fseek(arquivo, 0, SEEK_END); // Posiciona o ponteiro do arquivo no final
    fwrite(&novoRegistro, sizeof(Registro), 1, arquivo); // Escreve o registro no arquivo
    
    fclose(arquivo);
    printf("Registro incluído com sucesso.\n");
}

// Função para excluir um registro do arquivo
void excluirRegistro() {
    int codigo, mes;
    
    printf("Digite o código do vendedor: ");
    scanf("%d", &codigo);
    
    printf("Digite o mês: ");
    scanf("%d", &mes);
    
    FILE *arquivo = fopen("dados.bin", "r+b");
    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return;
    }
    
    Registro registro;
    int encontrado = 0;
    
    while (fread(&registro, sizeof(Registro), 1, arquivo) == 1) {
        if (registro.codigo_vendedor == codigo && registro.mes == mes) {
            encontrado = 1;
            break;
        }
    }
    
    if (encontrado) {
        long posicao = ftell(arquivo); // Posição do registro a ser excluído
        fseek(arquivo, posicao - sizeof(Registro), SEEK_SET); // Posiciona o ponteiro no registro
        Registro vazio = {0}; // Registro vazio para substituir o registro a ser excluído
        fwrite(&vazio, sizeof(Registro), 1, arquivo); // Sobrescreve o registro com o registro vazio
        printf("Registro excluído com sucesso.\n");
    } else {
        printf("Registro não encontrado.\n");
    }
    
    fclose(arquivo);
}

// Função para alterar o valor de uma venda no arquivo
void alterarVenda() {
    int codigo, mes;
    
    printf("Digite o código do vendedor: ");
    scanf("%d", &codigo);
    
    printf("Digite o mês: ");
    scanf("%d", &mes);
    
    FILE *arquivo = fopen("dados.bin", "r+b");
    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return;
    }
    
    Registro registro;
    int encontrado = 0;
    
    while (fread(&registro, sizeof(Registro), 1, arquivo) == 1) {
        if (registro.codigo_vendedor == codigo && registro.mes == mes) {
            encontrado = 1;
            break;
        }
    }
    
    if (encontrado) {
        long posicao = ftell(arquivo); // Posição do registro a ser alterado
        fseek(arquivo, posicao - sizeof(Registro), SEEK_SET); // Posiciona o ponteiro no registro
        printf("Digite o novo valor da venda: ");
        scanf("%f", &registro.valor_da_venda);
        fwrite(&registro, sizeof(Registro), 1, arquivo); // Sobrescreve o registro com o novo valor
        printf("Valor da venda alterado com sucesso.\n");
    } else {
        printf("Registro não encontrado.\n");
    }
    
    fclose(arquivo);
}

// Função para imprimir os registros na saída padrão
void imprimirRegistros() {
    FILE *arquivo = fopen("dados.bin", "rb");
    if (arquivo == NULL) {
        printf("Arquivo não encontrado.\n");
        return;
    }
    
    Registro registro;
    
    while (fread(&registro, sizeof(Registro), 1, arquivo) == 1) {
        printf("Código do vendedor: %d\n", registro.codigo_vendedor);
        printf("Nome do vendedor: %s\n", registro.nome_vendedor);
        printf("Valor da venda: %.2f\n", registro.valor_da_venda);
        printf("Mês: %d\n\n", registro.mes);
    }
    
    fclose(arquivo);
}

// Função para excluir o arquivo de dados
void excluirArquivo() {
    if (remove("dados.bin") == 0) {
        printf("Arquivo excluído com sucesso.\n");
    } else {
        printf("Erro ao excluir o arquivo.\n");
    }
}

int main() {
    char opcao;
    
    while (1) {
        printf("---- Menu ----\n");
        printf("1. Criar o arquivo de dados\n");
        printf("2. Incluir um registro no arquivo\n");
        printf("3. Excluir um vendedor no arquivo\n");
        printf("4. Alterar o valor de uma venda no arquivo\n");
        printf("5. Imprimir os registros na saída padrão\n");
        printf("6. Excluir o arquivo de dados\n");
        printf("7. Finalizar o programa\n");
        printf("Escolha uma opção: ");
        scanf(" %c", &opcao);
        
        switch (opcao) {
            case '1':
                criarArquivo();
                break;
            case '2':
                incluirRegistro();
                break;
            case '3':
                excluirRegistro();
                break;
            case '4':
                alterarVenda();
                break;
            case '5':
                imprimirRegistros();
                break;
            case '6':
                excluirArquivo();
                break;
            case '7':
                printf("Programa finalizado.\n");
                return 0;
            default:
                printf("Opção inválida.\n");
                break;
        }
    }
}


X --------------------------------------------------------------------------------------------------- X

/* Exercício 4 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LINE_LENGTH 256

void procura_padrao(const char* padrao, const char* nome_arquivo) {
    FILE *arquivo = fopen(nome_arquivo, "r");
    if (arquivo == NULL) {
        printf("Não foi possível abrir o arquivo.\n");
        return;
    }

    char line[MAX_LINE_LENGTH];
    int lineCount = 0;

    while (fgets(line, MAX_LINE_LENGTH, arquivo) != NULL) {
        lineCount++;
        if (strstr(line, padrao) != NULL) {
            printf("%d %s", lineCount, line);
        }
    }

    fclose(arquivo);
}

int main(int argc, char* argv[]) {
    if (argc != 3) {
        printf("Uso: procura <padrão> <arquivo>\n");
        return 1;
    }

    char* padrao = argv[1];
    char* nome_arquivo = argv[2];

    procura_padrao(padrao, nome_arquivo);

    return 0;
}

